class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def introduce(self):
        return f"Hey! Iâ€™m {self.name}, {self.age} years young."

p1 = Person("Mohammad Aldiesi", 24)
p2 = Person("Ahmad Al-Shamayleh", 40)

print("----------Exercise 1: Basic Class and Object----------")
print(p1.introduce())
print(p2.introduce())


class Dog:

    def __init__(self, name, breed):
        self.name = name
        self.breed = breed

    def describe(self):
        return f"{self.name} is a {self.breed}."

dog1 = Dog("Tensor", "Golden Retriever")
dog2 = Dog("Meow", "Husky")

print("----------Exercise 2: Instance vs Class Variables----------")
print(dog1.describe())
print(dog2.describe())



class BankAccount:
    def __init__(self, account_holder, balance=0):
        self.account_holder = account_holder
        self.balance = balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"{self.account_holder} deposited ${amount}. Balance is now ${self.balance}.")
        else:
            print("Deposit must be more than zero.")

    def withdraw(self, amount):
        if amount > 0:
            if amount <= self.balance:
                self.balance -= amount
                print(f"{self.account_holder} withdrew ${amount}. Balance is now ${self.balance}.")
            else:
                print("Not enough funds.")
        else:
            print("Withdrawal must be more than zero.")

    def get_balance(self):
        return self.balance

print("----------Exercise 3: Bank Account with Validation----------")
acc = BankAccount("Mohammad Aldiesi", 150)
acc.deposit(200)
acc.withdraw(50)
acc.withdraw(500)


class Book:
    def __init__(self, title, author, isbn):
        self.title = title
        self.author = author
        self.isbn = isbn

    def display_info(self):
        return f"'{self.title}' by {self.author} (ISBN: {self.isbn})"

class Library:
    def __init__(self):
        self.books = []

    def add_book(self, book):
        self.books.append(book)
        print(f"Added: {book.title}")

    def remove_book(self, isbn):
        self.books = [book for book in self.books if book.isbn != isbn]
        print(f"Removed book with ISBN: {isbn}")

    def list_books(self):
        if not self.books:
            return ["No books in the library right now."]
        return [book.display_info() for book in self.books]

lib = Library()
book1 = Book("Deep Learning with Python", "Eng. Naser Alzaghari", "9781617294433")
book2 = Book("Hands-On Machine Learning", "Dr. Ahmad AbuShareeha", "9781492032649")
lib.add_book(book1)
lib.add_book(book2)
print("----------Exercise 4: Library System----------")
print(lib.list_books())
lib.remove_book("9781617294433")
print(lib.list_books())


class Car:
    total_cars = 0

    def __init__(self, make, model):
        self.make = make
        self.model = model
        Car.total_cars += 1

    def display_car(self):
        return f"{self.make} {self.model}"

    @staticmethod
    def get_total_cars():
        return Car.total_cars

car1 = Car("Mercedes", "C180 Kompressor")
car2 = Car("Toyota", "Corolla")
car3 = Car("BMW", "M4 Competition")

print("----------Exercise 5: Class Variable Counter----------")
print(car1.display_car())
print(car2.display_car())
print(car3.display_car())
print(f"Total cars registered: {Car.get_total_cars()}")
